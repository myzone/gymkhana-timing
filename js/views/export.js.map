{"version":3,"sources":["export.es6"],"names":[],"mappings":"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","file":"export.js","sourcesContent":["define(['react', 'react-bootstrap', 'ramda', 'shuttle', 'shuttle-react', 'utils/commons'], (React, ReactBootstrap, R, Shuttle, ShuttleReact, Commons) => {\n    class ExportView extends Shuttle.React.Component {\n\n        constructor(params) {\n            super(params);\n\n            this.state.select = () => {\n            };\n            this.state.showOverlay = null;\n        }\n\n        render() {\n            const DOM = React.DOM;\n            const data = JSON.stringify(Shuttle.json(this.props.application), null, 3);\n\n            return React.createElement(ReactBootstrap.Modal, {\n                bsSize: \"large\",\n                show: this.props.opened,\n                onHide: () => {}\n            }, [\n                React.createElement(ReactBootstrap.Panel, {\n                    header: DOM.h3({}, \"Export\"),\n                    bsStyle: 'success',\n                    style: {marginBottom: '0'}\n                }, [\n                    this.state.showOverlay == 'success' && React.createElement(ReactBootstrap.Alert, {\n                        onDismiss: () => this.setState({showOverlay: null})\n                    }, \"Data have been copied to clipboard\"),\n                    DOM.textarea({\n                        ref: 'input',\n                        readOnly: true,\n                        style: {\n                            display: 'block',\n\n                            fontFamily: 'monospace',\n                            wordBreak: 'break-all',\n                            wordWrap: 'break-word',\n\n                            backgroundColor: '#f5f5f5',\n                            border: '1px solid #ccc',\n                            borderRadius: '4px',\n                            resize: 'none',\n                            outline: 'none',\n\n                            width: '100%',\n                            height: '70vh',\n                            overflow: 'auto'\n                        }\n                    }, data),\n                    DOM.br(),\n                    React.createElement(ReactBootstrap.ButtonGroup, {className: 'pull-right'}, [\n                        React.createElement(ReactBootstrap.Button, {onClick: this.state.select}, [\n                            this.state.showOverlay == 'failure' && React.createElement(ReactBootstrap.Tooltip, {\n                                className: 'in',\n                                style: {marginLeft: '-200%'},\n                                placement: 'left'\n                            }, \"Press CMD+C to copy\"),\n                            React.createElement(ReactBootstrap.Glyphicon, {glyph: 'copy'}),\n                            ' ',\n                            \"Copy\"\n                        ]),\n                        React.createElement(ReactBootstrap.Button, {\n                            onClick: () => {\n                                Commons.setQueryParams(R.dissoc('modal', Commons.getQueryParams()))\n                            }\n                        }, \"Cancel\")\n                    ])\n                ])\n            ]);\n        }\n\n        componentDidMount() {\n            super.componentDidMount();\n\n            const input = React.findDOMNode(this.refs.input);\n            const select = () => {\n                input.select();\n\n                try {\n                    if (!document.queryCommandSupported(\"copy\"))\n                        throw 'unsupported';\n\n                    document.execCommand('copy');\n                    this.setState({showOverlay: 'success'});\n                } catch (_) {\n                    this.setState({showOverlay: 'failure'});\n                }\n\n\n            };\n\n\n            this.setState({select: select})\n        }\n\n    }\n\n    return ExportView;\n});\n"]}